:title: Adding javadoc, comment and annotation

[cols="a,10a"]
|===
|image:./images/optimus-logo.png[height="128"]|[headertitle]#Adding javadoc, comment and annotation#
|===

''''
link:./m2mengine-apitransformations.html[Back to the index]

* <<Javadoc>>
* <<Comment>>
* <<Annotation>>
** <<AnnotationNoParam>>
** <<AnnotationParam>>
** <<AnnotationComplex>>

[[Javadoc]]
== Add javadoc to generated element

You can attach a Javadoc to any generated *Element* :

----------
Method method = MethodHelper.createMethod(createdInterface, VisibilityKind.PUBLIC, false
	, InheritanceKind.NONE, "int[]", "aMethod").addParameter("int", "nbElement");

method.addJavadoc(
	"Create an integer array \n @param nbElement the number of elements in the created array \n @return the created array.",
	false // no_empty_line
);
----------

Generating code : 

----------
/**
 * Create an integer array
 * 
 * @param nbElement
 *            the number of elements in the created array
 * @return the created array.
 */
public int[] aMethod(int nbElement);
----------

[[Comment]]
== Add comment to generated element

You can attach a comment to any generated *Element* :

----------
Method method = MethodHelper.createMethod(createdClass, VisibilityKind.PUBLIC, false, InheritanceKind.NONE,
	"int[]", "aMethod").addParameter("int", "nbElement");
ComplexInstruction inst = ReturnInstructionHelper.createNullReturnInstruction().addComment("TODO", true // prefix
			);
			
method.addInstructions(inst);
method.addComment("May add some other methods", false // suffix
);
----------

Generating code :

----------
public int[] aMethod(int nbElement) {
	// TODO
	return null;
}
// May add some other methods
----------

[[Annotation]]
== Add annotation

You can attach annotation on any *AbstractDeclaration* or *ArrayInitializerInstruction* or *Parameter*

[[AnnotationNoParam]]
=== Add annotation without parameter

An example with a *Method* :

----------
Method createdMethod = MethodHelper.createMethod(createdInterface, VisibilityKind.PUBLIC, false,
	InheritanceKind.NONE, "int[]", "aMethod");
createdMethod.addAnnotation("my.javapackage.annotation", "anAnnotation");
----------

Generating code :

----------
import my.javapackage.annotation.anAnnotation;

public interface myInterface {

	@anAnnotation
	public int[] aMethod();
	
}
----------

Create orphan annotation : 

----------
JavaAnnotation.createOrphanAnnotation("my.javapackage.orphan.annotation", "orphanAnnotation");

JavaAnnotation.createOrphanAnnotation(createdMethod, "my.javapackage.orphan.annotation", "orphanAnnotation");
----------

[[AnnotationParam]]
=== Add annotation with parameter

We need to create the *JavaAnnotation* and then add these parameters. 
The creation process attach automatically the annotation to the *Element* on which you execute the *createAnnotation(String,String,String)* method.

Annotation with simple parameter types :

----------
MethodHelper
	.createMethod(createdInterface, VisibilityKind.PUBLIC, false, InheritanceKind.NONE, "int[]", "aMethod")
	.createAnnotation("my.javapackage.annotation", "anAnnotation")
	.addAnnotationParameter("booleanProperty", true).addAnnotationParameter("intProperty", 5)
	.addAnnotationParameter("charProperty", 't');
----------

Generating code :

----------
import my.javapackage.annotation.anAnnotation;

public interface MyInterface {
	@anAnnotation(booleanProperty = true, intProperty = 5, charProperty = 't')
	public int[] aMethod();
}
----------

Annotation with Object parameter type and escape :

----------
MethodHelper
	.createMethod(createdInterface, VisibilityKind.PUBLIC, false, InheritanceKind.NONE, "int[]", "aMethod")
	.createAnnotation("my.javapackage.annotation", "anotherAnnotation")
	.addAnnotationParameter("property", createdInterface.getName(), true // escape_state
	);
----------

Generating code :

----------
import my.javapackage.annotation.anotherAnnotation;

public interface MyInterface {
	@anotherAnnotation(property = "MyInterface")
	public int[] aMethod();
}
----------

Or without escape :

----------
MethodHelper
	.createMethod(createdInterface, VisibilityKind.PUBLIC, false, InheritanceKind.NONE, "int[]", "aMethod")
	.createAnnotation("my.javapackage.annotation", "anAnnotationAgain")
	.addAnnotationParameter("property", createdInterface.getName(), false // escape_state
	);
----------

Generating code :

----------
import my.javapackage.annotation.anAnnotationAgain;

public interface MyInterface {

	@anAnnotationAgain(property = MyInterface)
	public int[] aMethod();
	
}
----------

We can add array parameter to a *JavaAnnotation* :

----------
MethodHelper
	.createMethod(createdInterface, VisibilityKind.PUBLIC, false, InheritanceKind.NONE, "int[]", "aMethod")
	.createAnnotation("my.javapackage.annotation", "anAnnotationWithArrayParameter")
	.addAnnotationParameter("arrayProperty", "aString", true)
	.addAnnotationParameter("arrayProperty", "anotherString", true);
----------

Generating code :

----------
import my.javapackage.annotation.anAnnotationWithArrayParameter;

public interface MyInterface {
	
	@anAnnotationWithArrayParameter(arrayProperty = { "aString",
			"anotherString" })
	public int[] aMethod();
	
}
----------

[[AnnotationComplex]]
=== Complex annotation adding process

Assume that we want to add to a *Method*, a *JavaAnnotation* with other *JavaAnnotation* as array parameters :

----------
JavaAnnotation annotation = MethodHelper.createMethod(createdInterface, VisibilityKind.PUBLIC, false,
	InheritanceKind.NONE, "int[]", "aMethod").createAnnotation("my.javapackage.annotation",
	"complexAnnotation");
annotation.createAnnotation("my.javapackage.internal.annotation", "internalAnnotation", "arrayParameter");
annotation.createAnnotation("my.javapackage.internal.annotation", "otherInternalAnnotation", "arrayParameter")
	.addAnnotationParameter("property", "foo", true);
----------

Generating code :

----------
import my.javapackage.annotation.complexAnnotation;
import my.javapackage.internal.annotation.internalAnnotation;
import my.javapackage.internal.annotation.otherInternalAnnotation;

public interface MyInterface {

@complexAnnotation(arrayParameter = { @internalAnnotation, @otherInternalAnnotation(property = "foo") })
public int[] aMethod();

}
----------

Assume that we want to add *Parameter* with *JavaAnnotation* to a *Method* :

----------
Method createdMethod = MethodHelper.createMethod(createdInterface, VisibilityKind.PUBLIC, false,
		InheritanceKind.NONE, "int[]", "aMethod");
Parameter parameter = ParameterHelper.builder("int").setMethod(createdMethod).build()
	.addAnnotation("my.javapackage.annotation", "anAnnotation");
parameter.createAnnotation("my.javapackage.annotation", "anotherAnnotation").addAnnotationParameter("property", 5);
----------

Generating code :

----------
import my.javapackage.annotation.anAnnotation;
import my.javapackage.annotation.anotherAnnotation;

public interface MyInterface {

	public int[] aMethod(@anAnnotation @anotherAnnotation(property = 5) int myInt);
	
}
----------

''''