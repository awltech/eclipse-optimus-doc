:title: Advanced use

[cols="a,10a"]
|===
|image:./images/optimus-logo.png[height="128"]|[headertitle]#Advanced use#
|===

''''
link:./m2mengine-apitransformations.html[Back to the index]

* <<Builder>>
* <<ImportDeclaration>>
* <<TypeAccess>>
* <<FieldAccess>>
* <<VariableAccess>>
* <<TypeParameter>>
* <<SingleDeclarationExpression>>
* <<AnnotationTypeMemberDeclaration>>
* <<AnnotationMemberValuePair>>

[[Builder]]

== AST builders

The API propose many builders to manipulate the modisco Java AST model directly. 
Below, we give the list of available AST node builder :

* Package, ImportDeclaration, Modifier, LineComment
* ClassDeclaration, CompilationUnit, UnresolvedClassDeclaration, InterfaceDeclaration, UnresolvedInterfaceDeclaration, EnumDeclaration, EnumConstantDeclaration
* FieldDeclaration, FieldAccess, ConstructorDeclaration, MethodDeclaration
* VariableDeclarationStatement, VariableDeclarationExpression, SingleVariableDeclaration, VariableDeclarationFragment, SingleVariableAccess
* CastExpression, ClassInstanceCreation, InfixExpression, InstanceOfExpression, ParenthesizedExpression, PostfixExpression, PrefixExpression, ThisExpression
* Assignment, ExpressionStatement, MethodInvocation, ReturnStatement, SuperConstructorInvocation, SuperMethodInvocation
* Block, DoStatement, EnhancedForStatement, ForStatement, IfStatement, SwitchCase, SwitchStatement, TryStatement, CatchClause, WhileStatement
* Annotation, AnnotationTypeDeclaration, UnresolvedAnnotationDeclaration, AnnotationTypeMemberDeclaration, AnnotationMemberValuePair
* ArrayCreation, ArrayInitializer, ArrayType, ArrayAccess
* Javadoc, TagElement, TextElement
* PrimitiveType, TypeParameter, UnresolvedType, WildCardType, TypeAccess, ParameterizedType

[[ImportDeclaration]]
== Generating import declaration

----------
ImportDeclarationHelper.createImportDeclaration("my.javapackage.Object", true // static_state
);
// import static my.javapackage.Object;

ImportDeclarationHelper.createImportDeclaration("my.other.javapackage.*", false // static_state
);
// import my.other.javapackage.*;
----------

[[TypeAccess]]

== Generating type access

Used when you want to access to an existed type

Reference a class :

----------
TypeAccess t1 = TypeAccessHelper.createClassTypeAccess("MyClass"); // Reference a class

//Used, for example, in the following context :

// MyClass.myField
// MyClass.myVar
// MyChildClass extends MyClass
// new MyClass()
// MyClass.staticMethod
----------

Reference an interface :

----------
TypeAccess t2 = TypeAccessHelper.createInterfaceTypeAccess("MyInterface");

// Used, for example, in the following context :

// AClass extends MyInterface
// AnInterface extends MyInterface
// AnEnum extends MyInterface
----------

Reference an exception :

----------
TypeAccess t3 = TypeAccessHelper.createExceptionTypeAccess("MyException");

// Used, for example, in the following context :

// myConstructor() throws MyException
// myMethod() throws MyException
// try {...} catch(MyException) {...}
----------

Reference a class or an interface :

----------

TypeAccess t4 = TypeAccessHelper.createTypeAccess("MyClassOrMyInterface");

// Used, for example, in the following context :

// MyClassOrMyInterface myField
// MyClassOrMyInterface myParameter
// MyClassOrMyInterface myVar
// MyClassOrMyInterface[] myArray

// MyClassOrMyInterface myMethod()

// (MyClassOrMyInterface) myObject
// myObject instanceof MyClassOrMyInterface
// for(MyClassOrMyInterface myObject : iterableObject)
----------

This helper handles parameterized type and array type (for example) :

----------
TypeAccess t5 = TypeAccessHelper.createClassTypeAccess("MyType<O extends Object, S extends AnotherType>");
TypeAccess t6 = TypeAccessHelper.createTypeAccess("List<Integer>[]");
----------

Annotation type access :

----------
TypeAccess t7 = TypeAccessHelper.createAnnotationTypeAccess(createdMethod, "my.javapackage.annotation", "anAnnotation");
TypeAccess t8 = TypeAccessHelper.createOrphanAnnotationTypeAccess(createdMethod, "my.javapackage.orphan.annotation.orphanAnnotation");

// Used, for example, in the following context :

@my.javapackage.annotation.aMethodAnnotation
myReturnType myMethod()

@my.javapackage.annotation.anArrayAnnotation
myArrayType[] myArray

@my.javapackage.annotation.aParameterAnnotation
myParamType myParameter
----------

[[FieldAccess]]

== Generating field access

----------
FieldAccess f1 = FieldAccessHelper.createFieldAccess("myField");
// this.myField

FieldAccess f2 = FieldAccessHelper.createFieldAccess("myField",true // proxy_state
);
----------

This helper handles field accessible directly via another field :

----------
FieldAccess f3 = FieldAccessHelper.createFieldAccess("myArrayField.length");
// this.myArrayField.length
----------

[[VariableAccess]]

== Generating variable access

----------
SingleVariableAccess v1 = VariableAccessHelper.createVariableAccess("myVariable");
// myVariable

SingleVariableAccess v2 = VariableAccessHelper.createVariableAccess("myVariable",true // proxy_state
);
----------

This helper handles class variable and field accessible directly via another variable :

----------
SingleVariableAccess v3 = VariableAccessHelper.createVariableAccess("MyClass.myClassVariable");
// MyClass.myClassVariable

SingleVariableAccess v4 = VariableAccessHelper.createVariableAccess("myArray.length");
// myArray.length
----------

[[TypeParameter]]

== Generating type parameter

Used when you created a type (in *ClassHelper* or *InterfaceHelper*) :

----------
String className = "MyClass<T extends Object, S extends AnotherClass>";
ClassDeclaration classDecl =  ClassDeclarationBuilder.builder()
	.setCompilationUnit(cu).setName(className).build();

TypeParameterHelper.addTypeParametersToTypeDeclaration(classDecl);
// Add properly the parameter T and S
----------

Or when you declared a parametric method (in *MethodHelper*) :

----------
// Some code with the creation of the MethodDeclaration methodDeclaration

TypeParameterHelper.addReturnTypeToMethodDeclaration(methodDeclaration, "<T super Collection<?>> List<S>");
// <T super Collection<?>> List<S> myMethod()
----------

[[SingleDeclarationExpression]]

== Generating single declaration expression

Create a variable declaration with no initialization :

----------
VariableDeclarationExpression exp1 = VariableDeclarationExpressionHelper.createVariableDeclarationExpression("List<Integer>", "myList",
	InheritanceKind.FINAL);
// final List<Integer> myList;
----------

[[AnnotationTypeMemberDeclaration]]
== Generating annotation type member declaration

Add a property to an annotation :

----------
// Some code with the creation of the Annotation annotation

AnnotationTypeMemberDeclaration annotationType = AnnotationTypeMemberDeclarationHelper
	.createTypeMemberDeclaration(annotation, "propertyName");
// @MyAnnotation(propertyName)
----------

[[AnnotationMemberValuePair]]
== Generating annotation member value pair

Add a value to a property of an annotation, automatically create the property or update the property to an array :

----------
// Some code with the creation of the Annotation annotation and the Expression propertyExpression

AnnotationMemberValuePair annotationPair = AnnotationMemberValuePairHelper.createAnnotationMemberValuePair(
				annotation, "propertyName", propertyExpression);
// @MyAnnotation(propertyName=/*propertyExpression*/)
----------

''''