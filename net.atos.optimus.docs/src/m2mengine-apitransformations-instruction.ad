:title: Generating instructions

[cols="a,10a"]
|===
|image:./images/optimus-logo.png[height="128"]|[headertitle]#Generating instructions#
|===

''''
link:./m2mengine-apitransformations.html[Back to the index]

A created instruction must be added to an *AbstractMethod* via the *addInstructions(IComplexInstruction...)* method in order to appear during the generation process.
We can't reuse an instruction and only *IComplexInstruction* can be added to a method.
Indeed, *ElementaryInstruction* have no sense alone.

* <<Constant>>
* <<Field/Variable>>
** <<VarDecl>>
* <<Array>>
* <<Operation>>
** <<Prefix>>
** <<Postfix>>
** <<Infix>>
* <<Assignment>>
** <<Assignment/Declaration>>
* <<Creation>>
** <<ArrayCreation>>
** <<ClassCreation>>
* <<MethodCall>>
* <<Argument>>
* <<Return>>
* <<Control>>
** <<If>>
** <<Switch>>
** <<While>>
** <<ForLoop>>
** <<ForIterable>>
** <<Try/Catch>>
* <<OtherInst>>
** <<Parenthesis>>
** <<InstanceOf>>
** <<Cast>>

[[Constant]]
== Generating constant instruction

----------
ElementaryInstructionHelper.createInstruction(false); // false boolean
ElementaryInstructionHelper.createInstruction(5); // 5 integer
ElementaryInstructionHelper.createInstruction('c'); // 'c' character
ElementaryInstructionHelper.createInstruction("bar"); // "bar" String
ElementaryInstructionHelper.createNullInstruction(); // null
----------

[[Field/Variable]]
== Generating this, field, variable instruction

Generating the this keyword :

----------
ElementaryInstructionHelper.createThisInstruction(); // this (access to current object)
----------

Generating an access to a variable :

----------
ElementaryInstructionHelper.createVariableInstruction("myVar"); // myVar (access to a variable)
----------

Generating an access to a field :

----------
ElementaryInstructionHelper.createFieldInstruction("myField"); // this.myField (access to a field)
----------

[[VarDecl]]
=== Generating variable declaration

----------
ComplexInstruction inst1 = VariableDeclarationHelper.builder("int", "myVariable").build();

ComplexInstruction inst2 = VariableDeclarationHelper.builder("List<Object>", "myList").setFinal(true).build();

ComplexInstruction inst3 = VariableDeclarationHelper.builder("String", "aString")
	.addVariable("anotherString", "aStringAgain").build();
----------

Generating code :

----------
int myVariable;

final List<Object> myList;

String aString, anotherString, aStringAgain;
----------

See the <<Assignment/Declaration>> part if you want to declare and assign a variable at the same time.

[[Array]]
== Generating array instruction

Access to an index of a field array :

----------
ArrayInstructionHelper.builderWithField("myArrayField").addIndex(5, 2).build();

// this.myArrayField[5][2]
----------

Access to an index holding by fields and variables in a variable array :

----------
ArrayInstructionHelper.builderWithVariable("myArrayVariable")
	.addFieldIndex("fieldIndex", "fieldIndex2").addVariableIndex("variableIndex1", "variableIndex2")
	.build();

// myArrayVariable[this.fieldIndex][this.fieldIndex2][variableIndex1][variableIndex2]
----------

Access to an index giving by a method return in a array returned by another method :

----------
ArrayInstructionHelper
	.builder(CallInstructionHelper.createThisMethodCallInstruction("getArray"))
	.addIndex(CallInstructionHelper.createThisMethodCallInstruction("getIndex")).build();
				
// this.getArray()[this.getIndex()]
----------

You can replace the calling instruction by any other *IElementary* instruction.

[[Operation]]
== Generating operation instruction

[[Prefix]]
=== Generating prefix operation

Prefix operation with boolean constant :

----------
Instruction inst1 = PrefixOperationHelper.builder().setOperator(PrefixExpressionKind.NOT).setOperand(true).build();
// !true
----------

Prefix operation with field and array field :

----------
Instruction inst2 = PrefixOperationHelper.builder().setOperator(PrefixExpressionKind.INCREMENT).setFieldOperand("myField")
	.build();
// ++this.myField

Instruction inst3 = PrefixOperationHelper.builder().setOperator(PrefixExpressionKind.DECREMENT)
	.setFieldArrayOperand("myArrayField", 3, 2).build();
// --this.myArrayField[3][2]

Instruction inst4 = PrefixOperationHelper.builder().setOperator(PrefixExpressionKind.DECREMENT)
	.setFieldArrayOperand("myArrayField", "i", "j").build();
// --this.myArrayField[i][j]
----------

Prefix operation with variable and array variable :

----------
Instruction inst5 = PrefixOperationHelper.builder().setOperator(PrefixExpressionKind.DECREMENT)
	.setVariableOperand("myVariable").build();
// --myVariable

Instruction inst6 = PrefixOperationHelper.builder().setOperator(PrefixExpressionKind.INCREMENT)
	.setVariableArrayOperand("myArrayVariable", 3, 2).build();
// ++myArrayVariable[3][2]

Instruction inst7 = PrefixOperationHelper.builder().setOperator(PrefixExpressionKind.INCREMENT)
	 .setVariableArrayOperand("myArrayVariable", "i", "j").build();
// ++myArrayVariable[i][j]
----------

Prefix operation in most general case :

----------
Instruction inst8 = PrefixOperationHelper.builder().setOperator(PrefixExpressionKind.NOT)
	.setOperand(CallInstructionHelper.createThisMethodCallInstruction("isSomething")).build();
// !this.isSomething()
----------

You can replace the calling instruction by any other *IElementary* instruction.

[[Postfix]]
=== Generating postfix operation

Postfix operation with field and array field :

----------
Instruction inst1 = PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.INCREMENT).setFieldOperand("myField")
	.build();
// this.myField++

Instruction inst2 = PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.DECREMENT)
	.setFieldArrayOperand("myArrayField", 3, 2).build();
// this.myArrayField[3][2]--

Instruction inst3 = PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.DECREMENT)
	.setFieldArrayOperand("myArrayField", "i", "j").build();
// this.myArrayField[i][j]--
----------

Postfix operation with variable and array variable :

----------
Instruction inst4 = PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.DECREMENT)
	.setVariableOperand("myVariable").build();
// myVariable--

Instruction inst5 = PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.INCREMENT)
	.setVariableArrayOperand("myArrayVariable", 3, 2).build();
// myArrayVariable[3][2]++

Instruction inst6 = PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.INCREMENT)
	.setVariableArrayOperand("myArrayVariable", "i", "j").build();
// myArrayVariable[i][j]++
----------

Postfix operation in most general case :

----------
Instruction inst7 = PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.INCREMENT)
	.setOperand(CallInstructionHelper.createThisMethodCallInstruction("getIncrementableObject")).build();
// this.getIncrementableObject()++
----------

You can replace the calling instruction by any other *IElementary* instruction.

[[Infix]]
=== Generating infix operation

Infix operation with constant :

----------
ElementaryInstruction inst1 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.PLUS).setLeftOperand('f')
	.setRightOperand("oo").build();
// 'f' + "oo"

ElementaryInstruction inst2 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.PLUS).setLeftOperand("ba")
	.setRightOperand('r').build();
// "ba"+'r'

ElementaryInstruction inst3 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.AND)
	.setLeftOperand(true).setRightOperand(false).build();
// true & false

ElementaryInstruction inst4 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.MINUS)
	.setLeftOperand(42).setRightOperand(24).build();
// 42 - 24
----------

Infix operation with field and array field :

----------
ElementaryInstruction inst5 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.NOT_EQUALS).setLeftThisOperand()
	.setRightThisOperand().build();
// this != this
				
ElementaryInstruction inst6 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.DIVIDE).setLeftFieldOperand("myField")
	.setRightFieldArrayOperand("myArrayField", 5, 5).build();
// this.myField / this.myArrayField[5][5]

ElementaryInstruction inst7 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.TIMES)
	.setLeftFieldArrayOperand("myArrayField", 3, 2)
	.setRightFieldArrayOperand("myOtherArrayField", "i", "j").build();
// this.myArrayField[3][2] * this.myOtherArrayField[i][j]

ElementaryInstruction inst8 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.MINUS)
	.setLeftFieldArrayOperand("myArrayField", "i", "j").setRightFieldOperand("myField").build();
// this.myArrayField[i][j] - this.myField
----------

Infix operation with variable and array variable :

----------
ElementaryInstruction inst9 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.DIVIDE)
	.setLeftVariableOperand("myVariable").setRightVariableArrayOperand("myArrayVariable", 5, 5).build();
// myVariable / myArrayVariable[5][5]

ElementaryInstruction inst10 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.TIMES)
	.setLeftVariableArrayOperand("myArrayVariable", 3, 2)
	.setRightVariableArrayOperand("myOtherArrayVariable", "i", "j").build();
// myArrayVariable[3][2] * myOtherArrayVariable[i][j]

ElementaryInstruction inst11 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.MINUS)
	.setLeftVariableArrayOperand("myArrayVariable", "i", "j").setRightVariableOperand("myVariable").build();
// myArrayVariable[i][j] - myVariable
----------

Infix operation in most general case :

----------
ElementaryInstruction inst12 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.GREATER_EQUALS)
	.setLeftOperand(CallInstructionHelper.createThisMethodCallInstruction("returnSomething"))
	.setRightOperand(CallInstructionHelper.createThisMethodCallInstruction("returnSomethingElse")).build();
// this.returnSomething() >= this.returnSomethingElse()
----------

You can replace calling instructions by any other *IElementary* instructions.

[[Assignment]]
== Generating assignment instruction

Assignment instruction with constant :

----------
Instruction inst1 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.ASSIGN)
	.setLeftVariableOperand("myVariable").setRightOperand(false).build();

Instruction inst2 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.ASSIGN)
	.setLeftVariableOperand("myVariable").setRightOperand('r').build();

Instruction inst3 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.ASSIGN)
	.setLeftVariableOperand("myVariable").setRightOperand("foobar").build();

Instruction inst4 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.ASSIGN)
	.setLeftVariableOperand("myVariable").setRightOperand(42).build();
----------

Generating code :

----------
myVariable = false;

myVariable = 'r';

myVariable = "foobar";

myVariable = 42;
----------

Assignment instruction with field and array field :

----------
Instruction inst5 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.ASSIGN).setLeftThisOperand()
	.setRightThisOperand().build();
				
Instruction inst6 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.PLUS_ASSIGN)
	.setLeftFieldOperand("myField").setRightFieldArrayOperand("myArrayField", 5, 5).build();

Instruction inst7 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.MINUS_ASSIGN)
	.setLeftFieldArrayOperand("myArrayField", 3, 2)
	.setRightFieldArrayOperand("myOtherArrayField", "i", "j").build();

Instruction inst8 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.TIMES_ASSIGN)
	.setLeftFieldArrayOperand("myArrayField", "i", "j").setRightFieldOperand("myField").build();
----------

Generating code :

----------
this = this;

this.myField += this.myArrayField[5][5];

this.myArrayField[3][2] -= this.myOtherArrayField[i][j];

this.myArrayField[i][j] *= this.myField;
----------

Assignment instruction with variable and array variable :

----------
Instruction inst9 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.PLUS_ASSIGN)
	.setLeftVariableOperand("myVariable").setRightVariableArrayOperand("myArrayVariable", 5, 5).build();

Instruction inst10 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.MINUS_ASSIGN)
	.setLeftVariableArrayOperand("myArrayVariable", 3, 2)
	.setRightVariableArrayOperand("myOtherArrayVariable", "i", "j").build();

Instruction inst11 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.TIMES_ASSIGN)
	.setLeftVariableArrayOperand("myArrayVariable", "i", "j").setRightVariableOperand("myVariable").build();
----------

Generating code :

----------
myVariable += myArrayVariable[5][5];

myArrayVariable[3][2] -= myOtherArrayVariable[i][j];

myArrayVariable[i][j] *= myVariable;
----------

Assignment instruction in most general case :

----------
Instruction inst12 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.DIVIDE_ASSIGN)
	.setLeftOperand(CallInstructionHelper.createThisMethodCallInstruction("getAssignableObject"))
	.setRightOperand(CallInstructionHelper.createThisMethodCallInstruction("returnSomething")).build();
----------

Generating code :

----------
this.getAssignableObject() /= this.returnSomething();
----------

You can replace calling instructions by any other *IElementary* instructions.

[[Assignment/Declaration]]
=== Generating variable declaration with assignment

----------
Instruction inst13 = AssignmentInstructionHelper.builder().setOperator(AssignmentKind.ASSIGN)
	.setLeftVariableDeclarationOperand("int", "myVariable").setRightOperand(0).build();

Instruction inst14 = AssignmentInstructionHelper.builder()
	.setOperator(AssignmentKind.ASSIGN)
	.setLeftVariableDeclarationOperand("List<Integer>", "myFinalList", true // final_state
	).setRightOperand(CallInstructionHelper.createClassInstanciationInstruction("LinkedList<Integer"))
	.build();
----------

Generating code :

----------
int myVariable = 0;

List<Integer> myFinalList = new LinkedList<Intege>();
----------

[[Creation]]
== Generating creation instruction

[[ArrayCreation]]
=== Generating array creation instruction

Create a new array with an elements list : 

----------

ArrayInitializerInstruction inst1 = ArrayCreationHelper.createArray(1, 2, 3, 4, 5, 6);
// {1, 2, 3, 4, 5, 6}

ArrayInitializerInstruction inst2 = ArrayCreationHelper.createArray(
	ElementaryInstructionHelper.createInstruction("foo"),
	ElementaryInstructionHelper.createInstruction("bar"),
	ElementaryInstructionHelper.createInstruction("foobar"));
// {"foo", "bar", "foobar"}
----------

You can replace simple String instructions by any other *IElementary* instructions.

Create a new array with type and dimensions :

----------
ElementaryInstruction inst3 = ArrayCreationHelper.builder("int").addDimensions(5, 2).build();
// new int[5][2]

ElementaryInstruction inst4 = ArrayCreationHelper.builder("Object").addFieldDimensions("myDimField","myDimField2")
	.addVariableDimensions("myDimVariable","myDimVariable2").build();
// new Object[this.myDimField][this.myDimField2][myDimVariable][myDimVariable2]

ElementaryInstruction inst5 = ArrayCreationHelper.builder("List<Object>")
	.addDimensions(CallInstructionHelper.createThisMethodCallInstruction("getDimension")).build();
// new List<Object>[this.getDimension()]
----------

You can replace calling instruction by any other *IElementary* instructions.

[[ClassCreation]]
=== Generating class instantiation instruction

----------
AbstractMethodInstruction inst1 = CallInstructionHelper.createClassInstanciationInstruction("List<Integer>");
		
AbstractMethodInstruction inst2 = CallInstructionHelper.createClassInstanciationInstruction("Integer").addArgument("5");
----------

Generating code :

----------
new List<Integer>();

new Integer("5");
----------

See more about argument in the section <<Argument>>

[[MethodCall]]
== Generating method call instruction

Method call on the current object, a field or a variable :

----------
AbstractMethodInstruction inst1 = CallInstructionHelper.createThisMethodCallInstruction("currentObjectMethod");

AbstractMethodInstruction inst2 = CallInstructionHelper.createFieldMethodCallInstruction("myField",
	"fieldMethod");
			
AbstractMethodInstruction inst3 = CallInstructionHelper.createVariableMethodCallInstruction("myVar",
	"variableMethod");
----------

Generating code :

----------
this.currentObjectMethod();

this.myField.fieldMethod();

myVar.variableMethod();
----------

Super constructor or super method :

----------
AbstractMethodInstruction inst4 = CallInstructionHelper.createSuperConstructorCallInstruction();

AbstractMethodInstruction inst5 = CallInstructionHelper.createSuperMethodCallInstruction("superMethod");
----------

Generating code :

----------
super();

super.superMethod();
----------

Static method :

----------
AbstractMethodInstruction inst6 = CallInstructionHelper.createStaticMethodCallInstruction("MyClass",
	"staticMethod");
----------

Generating code :

----------
MyClass.staticMethod();
----------

Chaining method call :

----------
AbstractMethodInstruction inst7 = CallInstructionHelper.createCallMethodInstruction(
	CallInstructionHelper.createCallMethodInstruction(
	CallInstructionHelper.createThisMethodCallInstruction("firstMethod"), "secondMethod"),
	"thirdMethod");
----------

Generating code :

----------
this.firstMethod().secondMethod().thirdMethod();
----------

You can replace the initial caller by any other *IElementary* instructions.

[[Argument]]
== Add argument to generated method

You can add argument by methods presented below during or after the creation

Add constant argument :

----------
AbstractMethodInstruction inst1 = CallInstructionHelper
	.createFieldMethodCallInstruction("myField", "someMethod").addArgument(42).addArgument("a string")
	.addArgument("false");

AbstractMethodInstruction inst2 = CallInstructionHelper
	.createVariableMethodCallInstruction("myVariable", "someMethod").addArgument('c').addNullArgument();
----------

Generating code :

----------
this.myField.someMethod(42, "a string", "false");

myVariable.someMethod('c', null);
----------

Add current object, field or variable as argument :

----------
AbstractMethodInstruction inst3 = CallInstructionHelper.createThisMethodCallInstruction("someMethod")
	.addFieldArgument("myField").addVariableArgument("myVar").addThisArgument();
----------


Generating code :

----------
this.someMethod(this.myField, myVar, this);
----------

Add complex argument :

----------
AbstractMethodInstruction inst4 = CallInstructionHelper.createStaticMethodCallInstruction("MyClass",
	"someMethod").addArgument(CallInstructionHelper.createThisMethodCallInstruction("otherMethod"));
----------


Generating code :

----------
MyClass.someMethod(this.otherMethod());
----------

You can replace the argument in complex example by any other *IElementary* instructions.

[[Return]]
== Generating return instruction

Constant return instruction :

----------
ComplexInstruction inst1 = ReturnInstructionHelper.createEmptyReturnInstruction();

ComplexInstruction inst2 = ReturnInstructionHelper.createNullReturnInstruction();

ComplexInstruction inst3 = ReturnInstructionHelper.createReturnInstruction(true);

ComplexInstruction inst4 = ReturnInstructionHelper.createReturnInstruction(12);

ComplexInstruction inst5 = ReturnInstructionHelper.createReturnInstruction('t');

ComplexInstruction inst6 = ReturnInstructionHelper.createReturnInstruction("foo");
----------

Generating code :

----------
return;

return null;

return true;

return 12;

return 't';

return "foo";
----------

This, field and variable return instruction :

----------
ComplexInstruction inst7 = ReturnInstructionHelper.createThisReturnInstruction();

ComplexInstruction inst8 = ReturnInstructionHelper.createVariableReturnInstruction("myVar");

ComplexInstruction inst9 = ReturnInstructionHelper.createFieldReturnInstruction("myField");
----------

Generating code :

----------
return this;

return myVar;

return this.myField;
----------

Or with any created *IElementaryInstruction* instruction :

----------
AbstractMethodInstruction inst10 = CallInstructionHelper.createFieldMethodCallInstruction("myField",
	"fieldMethod");
ComplexInstruction inst11 = inst10.convertToReturnInstruction();
----------

Generating code :

----------
return this.myField.fieldMethod();
----------

[[Control]]
== Generating control flow instruction

[[If]]
=== Generating if statement

----------
ComplexInstruction inst1 = IfInstructionHelper
	.builder(
		InfixOperationHelper.builder().setOperator(InfixExpressionKind.GREATER_EQUALS)
			.setLeftVariableOperand("myInt").setRightOperand(5).build()// if_condition
		,
		PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.DECREMENT)
			.setVariableOperand("myInt").build() // then_first_instruction
		, ReturnInstructionHelper.createVariableReturnInstruction("myInt") // then_second_instruction
	)
	.addElseBlockInstruction(
		PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.INCREMENT)
			.setVariableOperand("myInt").build() // else_instruction
	).build();
----------

Generating code : 
			
----------
if (myInt >= 5) {
	myInt--;
	return myInt;
} else {
	myInt++;
}
----------

[[Switch]]
=== Generating switch statement

Switch on a variable :

----------
ComplexInstruction inst1 = SwitchInstructionHelper
	.builderOnVariable("myVar")
	.addCaseBlock(2,
		true, // with_break
		PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.INCREMENT)
			.setVariableOperand("myVar").build())
	.addFinalCaseBlock(
		PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.DECREMENT)
			.setVariableOperand("myVar").build(),
		ReturnInstructionHelper.createVariableReturnInstruction("myVar")); // final_case
----------

Generating code : 
			
----------
switch (myVar) {
	case 2:
		myVar++;
		break;
	default:
		myVar--;
		return myVar;
}
----------
We doesn't need to call the *build()* method because the final case is necessary the last clause of the switch.

Switch on a field :

----------
ComplexInstruction inst2 = SwitchInstructionHelper
	.builderOnField("myField")
	.addCaseBlock('t', true) // with_break
	.addCaseVariableBlock("otherVariable", true,
		ReturnInstructionHelper.createVariableReturnInstruction("myField"))
	.addCaseBlock(CallInstructionHelper.createFieldMethodCallInstruction("otherField", "aMethod"), false, // no_break
		ReturnInstructionHelper.createThisReturnInstruction()).build();
----------

Generating code : 
			
----------
switch (this.myField) {
	case 't':
		break;
	case otherVariable:
		return myField;
		break;
	case this.otherField.aMethod():
		return this;
}
----------

Switch on any *IElementaryInstruction* instruction :

----------
ComplexInstruction inst3 = SwitchInstructionHelper
	.builder(CallInstructionHelper.createFieldMethodCallInstruction("myField", "fieldMethod"))
	.addCaseNullBlock(true, // with_break
		ReturnInstructionHelper.createNullReturnInstruction())
	.addFinalCaseBlock(ReturnInstructionHelper.createThisReturnInstruction());
----------

Generating code : 
			
----------
switch (this.myField.fieldMethod()) {
	case null:
		return null;
		break;
	default:
		return this;
}
----------

[[While]]
=== Generating while statement

Generating while statement :

----------
ComplexInstruction inst1 = DoWhileInstructionHelper.createWhileInstruction(
	InfixOperationHelper.builder().setOperator(InfixExpressionKind.GREATER_EQUALS)
		.setLeftVariableOperand("myInt").setRightOperand(5).build() // while_condition
	,
	PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.DECREMENT)
		.setVariableOperand("myInt").build(), // while_first_instruction
	CallInstructionHelper.createThisMethodCallInstruction("aMethod") // while_second_instruction
	);
----------

Generating code : 
			
----------
while (myInt >= 5) {
	myInt--;
	this.aMethod();
}
----------

Generating do statement :

----------
ComplexInstruction inst2 = DoWhileInstructionHelper.createDoInstruction(
	InfixOperationHelper.builder().setOperator(InfixExpressionKind.LESS_EQUALS)
		.setLeftVariableOperand("myInt").setRightOperand(10).build() // do_condition
	,
	PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.INCREMENT)
		.setVariableOperand("myInt").build(), // do_first_instruction
	CallInstructionHelper.createThisMethodCallInstruction("aMethod") // do_second_instruction
	);
----------

Generating code : 
			
----------
do {
	myInt++;
	this.aMethod();
} while (myInt <= 10);
----------

[[ForLoop]]
=== Generating for loop statement

----------
ComplexInstruction inst1 = ForLoopInstructionHelper.createdForLoopInstruction(
	AssignmentInstructionHelper.builder().setOperator(AssignmentKind.ASSIGN)
		.setLeftVariableDeclarationOperand("int", "i").setRightOperand(0).build(), // for_initializer
	InfixOperationHelper.builder().setOperator(InfixExpressionKind.LESS).setLeftVariableOperand("i")
		.setRightFieldOperand("myArray.length").build(), // for_condition
	PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.INCREMENT).setVariableOperand("i")
		.build(), // for_updater
	AssignmentInstructionHelper.builder().setOperator(AssignmentKind.ASSIGN)
		.setLeftFieldArrayOperand("myArray", "i").setRightVariableOperand("myInt").build(), // for_first_instruction
	PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.INCREMENT)
		.setVariableOperand("myInt") // for_second_instruction
		.build());
----------

Or with builder :

----------
ComplexInstruction inst2 = ForLoopInstructionHelper
	.builderIntLoop("i")
	.initializeVariable(0)
	.setLoopCondition(InfixExpressionKind.LESS,
		ElementaryInstructionHelper.createFieldInstruction("myArray.length"))
	.setLoopUpdate(PostfixExpressionKind.INCREMENT)
	.addInstructions(
		AssignmentInstructionHelper.builder().setOperator(AssignmentKind.ASSIGN)
			.setLeftFieldArrayOperand("myArray", "i").setRightVariableOperand("myInt").build(),
		PostfixOperationHelper.builder().setOperator(PostfixExpressionKind.INCREMENT)
			.setVariableOperand("myInt").build()).build();
----------

Generating code :

----------
for (int i = 0 ; i< this.myArray.length ; i++){
	this.myArray[i]=myInt;
	myInt++;
}
----------

Other for loop creation :

----------
ComplexInstruction inst3 = ForLoopInstructionHelper.builderIntLoop("i")
	.setLoopCondition(InfixExpressionKind.LESS, 10).setLoopUpdate(AssignmentKind.PLUS_ASSIGN, 2).build();

ComplexInstruction inst4 = ForLoopInstructionHelper.builderIntLoop("i").initializeVariableWithField("myField")
	.setLoopVariableCondition(InfixExpressionKind.LESS, "myVariable")
	.setLoopVariableUpdate(AssignmentKind.PLUS_ASSIGN, "otherVariable").build();

ComplexInstruction inst5 = ForLoopInstructionHelper.builderIntLoop("i")
	.initializeVariableWithOtherVariable("myVariable")
	.setLoopFieldCondition(InfixExpressionKind.LESS, "myField")
	.setLoopFieldUpdate(AssignmentKind.PLUS_ASSIGN, "otherField").build();

ComplexInstruction inst6 = ForLoopInstructionHelper
	.builderIntLoop("i")
	.initializeVariable(CallInstructionHelper.createThisMethodCallInstruction("aMethod"))
	.setLoopCondition(InfixExpressionKind.LESS,
		CallInstructionHelper.createThisMethodCallInstruction("anOtherMethod"))
	.setLoopUpdate(AssignmentKind.PLUS_ASSIGN,
		CallInstructionHelper.createThisMethodCallInstruction("aMethodAgain")).build();
----------

Generating code : 
			
----------
for (i ; i<10 ; i += 2){}

for (int i = this.myField ; i < myVariable; i += otherVariable){}

for (int i = myVariable ; i < this.myField ; i += this.otherField){}

for (int i = this.aMethod() ; i < this.anOtherMethod() ; i+= this.aMethodAgain()){}
----------

You can replace the calling instruction by any other *IElementaryInstruction* instruction.

[[ForIterable]]
=== Generating for iterable statement

For iterable with existing variable :

----------
ComplexInstruction inst1 = ForIterableInstructionHelper.builder("variable")
	.setIterableFieldInstruction("myIterableField")
	.addInstructions(CallInstructionHelper.createVariableMethodCallInstruction("variable", "aMethod"))
	.build();
----------

Generating code : 
			
----------
for (variable : this.myIterableField){
	variable.aMethod();
}
----------

For iterable with variable creation :

----------
ComplexInstruction inst2 = ForIterableInstructionHelper.builder("Object", "variable")
	.setIterableVariableInstruction("myIterableVariable")
	.addInstructions(CallInstructionHelper.createVariableMethodCallInstruction("variable", "aMethod"),
		CallInstructionHelper.createVariableMethodCallInstruction("variable", "anotherMethod"))
	.build();
----------

Generating code : 
			
----------
for (Object variable : myIterableVariable){
	variable.aMethod();
	variable.anotherMethod();
}
----------

A more general example :

----------
ComplexInstruction inst3 = ForIterableInstructionHelper.builder("Object", "variable")
	.setIterableInstruction(CallInstructionHelper.createThisMethodCallInstruction("methodReturnIterable"))
	.build();
----------

Generating code : 
			
----------
for(Object variable : this.methodReturnIterable()){}
----------

You can replace the calling instruction by any other *IElementary* instruction.

[[Try/Catch]]
=== Generating try/catch statement

----------
ComplexInstruction inst = TryCatchInstructionHelper
	.builder(CallInstructionHelper.createThisMethodCallInstruction("aMethodThrowingException"))
	.addTryBlockInstruction(
		CallInstructionHelper.createThisMethodCallInstruction("anotherMethodThrowingException"))
	.addCatchBlock("Exception1", "e1", CallInstructionHelper.createThisMethodCallInstruction("doSomething"))
	.addCatchBlock("Exception2", "e2",
		CallInstructionHelper.createThisMethodCallInstruction("doSomethingElse"),
		CallInstructionHelper.createSuperMethodCallInstruction("superMethod"))
	.addFinallyBlockInstruction(CallInstructionHelper.createThisMethodCallInstruction("doFinalThing"),
		CallInstructionHelper.createSuperMethodCallInstruction("superMethod")).build();
----------

Generating code : 
			
----------
try {
	this.aMethodThrowingException();
	this.anotherMethodThrowingException();
} catch (Exception1 e1) {
	this.doSomething();
} catch (Exception2 e2) {
	this.doSomethingElse();
	super.superMethod();
} finally {
	this.doFinalThing();
	super.superMethod();
}
----------

You can replace the calling instruction by any other *IComplexInstruction* instruction.

[[OtherInst]]
== Generating other instruction

[[Parenthesis]]
=== Generating parenthesized instruction

On any *IElementaryInstruction*, you can add parenthesis :

----------
IElementaryInstruction inst = InfixOperationHelper.builder().setOperator(InfixExpressionKind.PLUS)
	.setLeftOperand(5).setRightOperand(10).build();

IElementaryInstruction inst1 = InfixOperationHelper.builder().setOperator(InfixExpressionKind.TIMES)
	.setLeftOperand(inst.withParentheses())
	.setRightOperand(2).build();
			
// (5 + 10) * 2;
----------

[[InstanceOf]]
=== Generating instanceof instruction

You can convert any *IElementaryInstruction* to an instanceof instruction :

----------
IElementaryInstruction inst = CallInstructionHelper.createThisMethodCallInstruction("aMethod")
	.convertToInstanceOfInstruction("MyType");
			
// this.aMethod() instanceof MyType
----------

[[Cast]]
=== Generating cast instruction

You can convert any *IElementaryInstruction* to a cast instruction :

----------
IElementaryInstruction inst = CallInstructionHelper.createThisMethodCallInstruction("aMethod")
	.convertToCastInstruction("MyType");

// (MyType) this.aMethod()
----------
